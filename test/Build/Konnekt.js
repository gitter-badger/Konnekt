var Konnekt = (function() {    var CreateKonnektDT = (function() {        function CreateKonnektDT(data, name, parent, scope) {            var _events = {                    "set": [],                    "postset": [],                    "create": [],                    "postcreate": [],                    "delete": [],                    "postdelete": [],                    "splice": [],                    "postsplice": [],                    "push": [],                    "postpush": [],                    "pop": [],                    "postpop": [],                    "shift": [],                    "postshift": [],                    "unshift": [],                    "postunshift": [],                    "fill": [],                    "postfill": [],                    "reverse": [],                    "postreverse": [],                    "sort": [],                    "postsort": [],                    "addlistener": [],                    "postaddlistener": [],                    "removelistener": [],                    "postremovelistener": [],                    "addchildlistener": [],                    "postaddchildlistener": [],                    "removechildlistener": [],                    "postremovechildlistener": []                },                _ignoreList = [],                _loopEvents = function(events, e) {                    if (!e._stopPropogration && events) {                        for (var x = 0, len = events.length; x !== len; x++) {                            events[x](e);                            if (e._stopPropogration) break;                        }                    }                },                _onevent = function(e) {                    if (e.listener) {                        var _local = e.local[e.listener],                            _child = e.local[(e.listener.replace('__kb', '__kbparent'))];                        /* Local */                        if (isObject.call(_local)) {                            _loopEvents(_local[e.key], e);                            _loopEvents(_local['*'], e);                        } else {                            _loopEvents(_local, e);                        }                        /* Child */                        if (isObject.call(_child)) {                            _loopEvents(_child[e.key], e);                            _loopEvents(_child['*'], e);                        } else {                            _loopEvents(_child, e);                        }                    }                    _loopEvents(e.local.__kbref.__kbevents[e.type], e);                    return e._preventDefault;                }            if (!Object.prototype._toString) Object.prototype._toString = Object.prototype.toString;            if (!Object._keys) Object._keys = Object.keys;            Object.prototype.toString = function() {                if (this instanceof Mixed) return "[object Mixed]";                return Object.prototype._toString.apply(this, arguments);            }            Object.keys = function(v, type) {                return Object._keys(v)                    .filter(function(k) {                        return ((!type) || ((type === 'object' || type === 'o')) ? (isNaN(parseInt(k, 10))) : (type === 'all' ? true : (!isNaN(parseInt(k, 10)))));                    });            };            Object.defineProperties(Object.prototype, {                typeof: setDescriptor(function(v) {                    return ({}).toString.call(v).match(/\s([a-zA-Z]+)/)[1].toLowerCase();                }, false, true),                sizeof: setDescriptor(sizeof, false, true),                isObject: setDescriptor(isObject, false, true),                isArray: setDescriptor(isArray, false, true),                isMixed: setDescriptor(isMixed, false, true),                isObservable: setDescriptor(isObservable, false, true),                stringify: setDescriptor(stringify, false, true),                getKeys: setDescriptor(getKeys, false, true),                getIndexes: setDescriptor(getIndexes, false, true),                keyCount: setCustomDescriptor(keyCount, false, true),                indexCount: setCustomDescriptor(indexCount, false, true),                count: setCustomDescriptor(count, false, true),            });            /* The Main constructor */            function Mixed(data, name, parent, scope) {                data = (data === undefined ? {} : data);                /* Object prototype extensions chained down to the function */                ;                var KonnektDT = {};                if (typeof Proxy === 'undefined') return console.error("There is no support for proxies! This library can not be used here, please update Your js library or browser");                var prox = new Proxy(KonnektDT, {                        set: proxySet,                        deleteProperty: proxyDelete                    }),                    keys = Object.keys(data, 'all');                Object.defineProperties(KonnektDT, {                    __kbname: setDescriptor((typeof name === 'string' ? name : "default"), true, true),                    __kbref: setDescriptor((parent ? (parent.__kbref || parent) : prox), true, true),                    __kbscopeString: setDescriptor((scope || ""), true, true),                    __kbImmediateParent: setDescriptor((parent || null), true, true),                    __kbsubscribers: setDescriptor({}),                    __kblisteners: setDescriptor({}),                    __kbupdatelisteners: setDescriptor({}),                    __kbparentlisteners: setDescriptor({}),                    __kbparentupdatelisteners: setDescriptor({}),                    __kbcreatelisteners: setDescriptor([]),                    __kbdeletelisteners: setDescriptor([]),                    __kbparentcreatelisteners: setDescriptor([]),                    __kbparentdeletelisteners: setDescriptor([]),                    __kbpointers: setDescriptor({}),                    __kbevents: setDescriptor(_events),                    length: setDescriptor(0, true),                    __kbnonproxy: setDescriptor(KonnektDT, false, true)                });                for (var x = 0, len = keys.length; x < len; x++) {                    prox[keys[x]] = data[keys[x]];                }                KonnektDT.__proto__ = Mixed.prototype;                KonnektDT.addActionListener('addlistener', function(e) {                        if (typeof e.arguments[0] === 'string' && e.local.__kbpointers[e.arguments[0]] !== undefined) {                            e.local.__kbpointers[e.arguments[0]][e.arguments[2]](e.arguments[0], e.arguments[1]);                        }                    })                    .addActionListener('removelistener', function(e) {                        if (typeof e.arguments[0] === 'string' && e.local.__kbpointers[e.arguments[0]] !== undefined) {                            e.local.__kbpointers[e.arguments[0]][e.arguments[2]](e.arguments[0], e.arguments[1]);                        }                    })                return prox;            }            /* Helper methods and the main proxy Methods */            function eventObject(obj, key, type, value, oldValue, args, listener, stopChange) {                this.stopPropogation = function() {                    this._stopPropogration = true;                }                this.preventDefault = function() {                    this._preventDefault = true;                }                this.local = obj;                this.key = key;                this.arguments = args;                this.event = type;                this.type = type;                this.listener = listener;                this.name = obj.__kbname;                this.root = obj.__kbref;                this.scope = obj.__kbscopeString;                this.parent = obj.___kbImmediateParent;                this.value = value;                this.oldValue = oldValue;                this.stopChange = stopChange;            }            function setDescriptor(value, writable, redefinable) {                return {                    value: value,                    writable: !!writable,                    enumerable: false,                    configurable: !!redefinable                }            }            function setCustomDescriptor(func, writable, redefinable) {                return {                    get: function() {                        return func.call(this);                    },                    set: function(v) {                        if (!!writable) func = v;                    },                    enumerable: false,                    configurable: !!redefinable                }            }            function setBindDescriptor(key, value) {                var _value = value,                    _oldValue = value,                    _key = key,                    _set = function(v, e) {                        _oldValue = _value;                        _value = v;                        if (!e.stopChange) {                            e.listener = '__kbupdatelisteners';                            e.type = 'postset';                            _onevent(e);                        }                    };                return {                    get: function() {                        return _value;                    },                    set: function(v) {                        var e = new eventObject(this, _key, 'set', v, _value, arguments, '__kblisteners', this._stopChange);                        if (_onevent(e) !== true) {                            _set(v, e);                            if (!this._stopChange) this.callSubscribers(_key, _value, _oldValue);                        }                        this._stopChange = undefined;                    },                    configurable: true,                    enumerable: true                }            }            function setPointer(obj, prop, desc) {                return {                    get: function() {                        return obj[prop];                    },                    set: function(v) {                        (this._stopChange ? obj.stopChange() : obj)[prop] = v;                        this._stopChange = undefined;                    },                    enumerable: desc.enumerable,                    configurable: desc.configurable                }            }            function parseParentListenersToNewObjects(mixed, target) {                var listeners = [{                            listener: '__kbparentlisteners',                            action: 'addChildListener'                        },                        {                            listener: '__kbparentupdatelisteners',                            action: 'addChildUpdateListener'                        },                        {                            listener: '__kbparentcreatelisteners',                            action: 'addChildCreateListener'                        },                        {                            listener: '__kbparentdeletelisteners',                            action: 'addChildDeleteListener'                        }                    ],                    keys = [],                    _currListener;                for (var x = 0, len = listeners.length; x < len; x++) {                    _currListener = mixed[listeners[x].listener];                    if (isObject.call(_currListener)) {                        keys = Object.keys(_currListener);                        for (var i = 0, lenI = keys.length; i < lenI; i++) {                            for (var z = 0, lenZ = _currListener[keys[i]].length; z < lenZ; z++) {                                target[listeners[x].method](keys[i], _currListener[keys[i]][z]);                            }                        }                    } else {                        for (var i = 0, lenI = _currListener.length; i < lenI; i++) {                            target[listeners[x].method](_currListener[i]);                        }                    }                }            }            function parsePointerEvents(target, key) {                var events = [{                            listeners: '__kblisteners',                            method: 'addDataListener'                        },                        {                            listeners: '__kbupdatelisteners',                            method: 'addDataUpdateListener'                        }                    ],                    keys = [],                    _currListener;                if (target[key].__kbImmediateParent) {                    for (var x = 0, len = events.length; x < len; x++) {                        _currListener = target[events[x].listener];                        keys = Object.keys(_currListener);                        for (var i = 0, lenI = keys.length; i < lenI; i++) {                            if (key === keys[x]) {                                for (var z = 0, lenZ = _currListener[keys[x]].length; z < lenZ; z++) {                                    if (target[key].__kbImmediateParent[events[x].listener][key] === undefined) target[key].__kbImmediateParent[events[x].listener][key] = [];                                    target[key].__kbImmediateParent[events[x].listener][key].push(_currListener[keys[x]][z]);                                }                            }                        }                    }                }                parseParentListenersToNewObjects(target, target[key]);            }            function handleNewObject(target, key, value, isCreated) {                value = new Mixed(value, target.__kbname, target, (target.__kbscopeString + (target.__kbscopeString.length !== 0 ? "." : "") + key));                parseParentListenersToNewObjects(target, value);                if (isCreated) {                    var e = new eventObject(target, key, 'create', value, undefined, [], '__kbcreatelisteners', target._stopChange),                        onEvent = _onevent(e);                    if (onEvent !== true) {                        Object.defineProperty(target, key, setBindDescriptor(key, value));                        e.listener = '__kbupdatelisteners';                        e.type = 'postcreate'                        _onevent(e);                    }                    return (onEvent !== true);                } else {                    Object.defineProperty(target, key, setBindDescriptor(key, value));                    return true;                }            }            function handleNewMixed(target, key, value, isCreated) {                if (isCreated) {                    var e = new eventObject(target, key, 'create', value, undefined, [], '__kbcreatelisteners', target._stopChange),                        onEvent = _onevent(e);                    if (onEvent !== true) {                        var desc = Object.getOwnPropertyDescriptor(value.__kbImmediateParent, key);                        Object.defineProperty(target, key, setPointer(value.__kbImmediateParent, key, desc));                        target.__kbpointers.push(key);                        parsePointerEvents(target, key)                        e.listener = '__kbupdatelisteners';                        e.type = 'postcreate';                        _onevent(e);                    }                    return (onEvent !== true);                } else {                    var desc = Object.getOwnPropertyDescriptor(value.__kbImmediateParent, key);                    Object.defineProperty(target, key, setPointer(value.__kbImmediateParent, key, desc));                    target.__kbpointers.push(key);                    parsePointerEvents(target, key);                    return true;                }            }            /* create check if value is just undefined but descriptor is set */            function proxySet(target, key, value) {                if (!isObservable.call(target, key)) {                    if (!isNaN(parseInt(key, 10))) {                        key = parseInt(key, 10);                        if (target.length <= key) target.length = (key + 1);                    }                    if (target._stopChange) {                        target[key] = value;                        return true;                    } else {                        if (_ignoreList.indexOf(key) === -1) {                            /* A new property was added */                            if (typeof value === 'object') {                                return handleNewObject(target, key, value, true);                            } else if (value instanceof Mixed) {                                return handleNewMixed(target, key, value, true);                            } else {                                var e = new eventObject(target, key, 'create', value, undefined, [], '__kbcreatelisteners', target._stopChange),                                    onEvent = _onevent(e);                                if (onEvent !== true) {                                    Object.defineProperty(target, key, setBindDescriptor(key, value));                                    e.listener = '__kbupdatelisteners';                                    e.type = 'postcreate';                                    _onevent(e);                                }                                return (onEvent !== true);                            }                        }                    }                } else {                    if (key === 'length') {                        if (value > target.length && target[(value - 1)] !== undefined) {                            target.length = value;                        } else if (value < target.length) {                            for (var x = value, len = (target.length); x < len; x++) {                                if (target[x]) delete target[x];                            }                            target.length = value;                        }                    } else {                        if (typeof value === 'object') {                            return handleNewObject(target, key, value);                        } else if (value instanceof Mixed) {                            return handleNewMixed(target, key, value);                        } else {                            target[key] = value;                        }                    }                    return true;                }            }            /* Need to handle removing parentListeners prior to removal */            function proxyDelete(target, key) {                /* change size */                var e = new eventObject(target, key, 'delete', target[key], undefined, [], '__kbdeletelisteners', target._stopChange),                    onEvent = _onevent(e);                if (onEvent !== true) {                    if (typeof target[key] === 'object') target[key] = null;                    delete target[key];                    e.listener = '__kbupdatelisteners';                    e.type = 'postdelete'                    _onevent(e);                }                return (onEvent !== true);            }            function ignoreCreate(name) {                if (_ignoreList.indexOf(name) === -1) _ignoreList.push(name);                return this;            }            /* REGION Object extensions */            function sizeof(v) {                if (this == Object.prototype && v === undefined) return console.error("No object specified in Object.prototype.sizeof");                var cache = [];                function recGet(obj) {                    var keys = Object.keys(obj, 'all'),                        count = 0,                        _curr = undefined;                    for (var x = 0, len = keys.length; x < len; x++) {                        _curr = obj[keys[x]];                        if (typeof _curr === 'object' && _curr !== undefined && _curr !== null) {                            if (cache.indexOf(_curr) === -1) {                                cache.push(_curr);                                count += recGet(_curr);                            }                        } else if (typeof _curr === 'string') {                            count += (_curr.length * 2);                        } else if (typeof _curr === 'number') {                            count += 8;                        } else if (typeof _curr === 'boolean') {                            count += 4;                        } else if (typeof _curr === 'function') {                            count += (_curr.toString().length * 2);                        }                        count += (keys[x].length * 2);                    }                    return count;                }                return recGet((v || this)) + " Bytes (Rough estimate)";            }            function isObject(v) {                if (this == Object.prototype && v === undefined) return console.error("No value specified in Object.prototype.isObject to check");                return (Object.prototype.typeof((v !== undefined ? (typeof v === 'object' ? v : this[v]) : this)) === 'object');            }            function isArray(v) {                if (this == Object.prototype && v === undefined) return console.error("No value specified in Object.prototype.isArray to check");                return (Object.prototype.typeof((v !== undefined ? (typeof v === 'object' ? v : this[v]) : this)) === 'array');            }            function isMixed(v) {                if (this == Object.prototype && v === undefined) return console.error("No value specified in Object.prototype.isMixed to check");                return (Object.prototype.typeof((v !== undefined ? (typeof v === 'object' ? v : this[v]) : this)) === 'mixed');            }            function isObservable(obj, prop) {                if (this == Object.prototype && obj === undefined && prop === undefined) return console.error("No object and property specified in Object.prototype.isObservable to check");                if (obj === undefined) return console.error("No property specified in isObservable to check");                var desc = Object.getOwnPropertyDescriptor((obj !== undefined && typeof obj !== 'string' ? obj : this), (prop !== undefined ? prop : obj));                return (desc ? (desc.value === undefined) : false);            }            function stringify(v) {                if (this == Object.prototype && v === undefined) return console.error("No object was specified in Object.prototype.stringify to stringify");                var cache = [];                return JSON.stringify(this, function(key, value) {                    if (isArray(value) || isObject(value)) {                        if (cache.indexOf(value) !== -1) {                            return;                        }                        cache.push(value);                    }                    return value;                });            }            function getKeys(v, type) {                type = (typeof v === 'string' && type === undefined ? v : type);                if (this == Object.prototype && v === undefined) return console.error("No object was specified in Object.prototype.getkeys");                return Object.keys((v !== undefined && typeof v !== 'string' ? (typeof v === 'object' ? v : this[v]) : this));            }            function getIndexes(v) {                if (this == Object.prototype && v === undefined) return console.error("No object was specified in Object.prototype.getIndexes");                var _arr = (v !== undefined ? (typeof v === 'object' ? v : this[v]) : this);                return _arr.slice()                    .map(function(v, i) {                        return (i)                    })                    .filter(function(v) {                        return (_arr[v] !== undefined)                    });            }            function keyCount() {                return this.getKeys('o').length            }            function indexCount(v) {                return (this).length;            }            function count(v) {                return (this.keyCount + this.indexCount);            }            /* ENDREGION Object extensions */            /* REGION Object methods */            function add(key, value) {                if (this[key] === 'undefined') {                    this[key] = value;                }                return this;            }            function set(key, value) {                this[key] = value;                return this;            }            function addPrototype(key, value) {                if (this[key] === undefined) {                    Object.defineProperty(this.__proto__, key, setDescriptor(value, true, true));                } else {                    console.error('Your attempting to add your prototype with the prop %O that already exists on %O', prop, this);                }                return this;            }            /* Handle listener sharing (done in addlistener Methods) */            function addPointer(passobj, prop) {                if (!(passobj instanceof Mixed)) passobj = new Mixed(passobj, passobj.__kbname, passobj, (''));                var desc = Object.getOwnPropertyDescriptor(passobj, prop);                Object.defineProperty(this, (prop), setPointer(passobj, prop, desc));                this.__kbpointers[(prop)] = passobj;            }            function del(key) {                if (this[key] !== undefined) {                    delete this[key];                }                return this;            }            function move(obj, prop) {                this[prop] = obj[prop];                if (!(obj instanceof Mixed)) obj[prop] = null;                delete obj[prop];                return this;            }            function copy(obj, prop) {                this[prop] = obj[prop];                return this;            }            function merge(obj) {                var cache = [];                function recMerge(from, to) {                    var keys = (from instanceof Mixed ? from.keys('o') : Object.keys(from)),                        _curr;                    for (var x = 0, len = keys.length; x < len; x++) {                        _curr = from[keys[x]];                        if (typeof _curr === 'object' && cache.indexOf(_curr) === -1 && to[keys[x]] !== 'undefined') {                            recMerge(_curr, to);                        } else {                            to[keys[x]] = _curr;                        }                    }                }                recMerge(obj, this);                return this;            }            /* ENDREGION Object methods */            /* REGION Array methods */            function copyWithin(target, start, end) {                start = (start || 0);                end = (end || 0);                var e = new eventObject(this, target, 'copyWithin', this[target], undefined, arguments, '');                if (_onevent(e) !== true && target < this.length) {                    target = (target < 0 ? (this.length - 1) : target);                    start = (start < this.length ? start : (this.length - 1));                    end = (end < this.length ? end : (this.length - 1));                    start = (start < 0 ? (this.length - 1) : start);                    end = (start < 0 ? (this.length - 1) : end);                    for (var x = start; x <= end; x++) {                        this[(target + (x - start))] = this[x];                    }                    e.type = 'postcopyWithin';                    _onevent(e);                }                return this;            }            function fill(value, start, end) {                start = (start !== undefined ? Math.max(0, start) : 0);                end = ((end !== undefined && end <= this.length) ? Math.min(this.length, Math.max(0, end)) : this.length);                var e = new eventObject(this, _start, 'fill', this[_start], undefined, arguments, '');                if (_onevent(e) !== true) {                    for (var x = a.key; x < end; x++) {                        this[x] = value;                    }                    e.type = 'postfill';                    _onevent(e);                }                return this;            }            function pop() {                var e = new eventObject(this, (this.length - 1), 'pop', this[(this.length - 1)], undefined, arguments, '');                if (_onevent(e) !== true) {                    var _ret = this[(this.length - 1)];                    this.length = (this.length - 1);                    e.type = 'postpop'                    _onevent(e);                    return _ret;                }                return null;            }            function push(v) {                var e = new eventObject(this, (this.length), 'push', v, undefined, arguments, '');                if (_onevent(e) !== true) {                    this[this.length] = v;                    e.type = 'postpush';                    _onevent(e);                }                return this.length;            }            function reverse() {                var e = new eventObject(this, undefined, 'reverse', undefined, undefined, arguments, '');                if (_onevent(e) !== true) {                    var _rev = this.slice().reverse();                    for (var x = 0, len = this.length; x < len; x++) {                        this[x] = _rev[x];                    }                    e.type = 'postreverse';                    _onevent(e);                }                return this;            }            function shift() {                var e = new eventObject(this, 0, 'shift', this[0], undefined, arguments, '');                if (_onevent(e) !== true) {                    var _ret = this[a.key];                    for (var x = a.key, len = (this.length - 1); x < len; x++) {                        this[x] = this[(x + 1)];                    }                    this.length = (this.length - 1);                    e.type = 'postshift';                    _onevent(e);                }                return null;            }            function sort() {                var e = new eventObject(this, undefined, 'sort', undefined, undefined, arguments, '');                if (_onevent(e) !== true) {                    var _sort = this.slice();                    _sort = _sort.sort.apply(_sort, arguments);                    for (var x = 0, len = this.length; x < len; x++) {                        this[x] = _sort[x];                    }                    e.type = 'postsort';                    _onevent(e);                }                return this;            }            function splice(index, remove, insert) {                var e = new eventObject(this, index, 'splice', undefined, undefined, arguments, '');                if (_onevent(e) !== true) {                    var _ret = [],                        _inserts = Array.prototype.slice.call(arguments, 2),                        _insertLen = (_inserts.length - 2),                        _index = 0;                    if (remove !== 0 && this[((index - 1) + remove)] !== undefined) {                        for (var x = 0, len = remove; x < len; x++) {                            _ret.push(this[index + x]);                            for (var i = (index + x), lenI = (this.length - 1); i < lenI; i++) {                                this[i] = this[(i + 1)];                            }                            delete this[(this.length - 1)];                        }                    }                    if (_insertLen !== 0) {                        for (var x = 0, len = _insertLen; x < len; x++) {                            _index = (index + (Math.min(1, x)));                            for (var i = this.length, lenI = _index; i > lenI; i--) {                                this[i] = this[(i - 1)];                            }                            this[_index] = _inserts[x];                        }                    }                    e.type = 'postsplice';                    e.listener = '';                    _onevent(e);                    return _ret;                } else {                    return [];                }            }            function unshift() {                var e = new eventObject(this, 0, 'unshift', this[0], undefined, arguments, '');                if (_onevent(e) !== true) {                    var args = Array.prototype.slice.call(arguments);                    for (var x = ((this.length - 1) + args.length), len = args.length; x !== -1; x--) {                        if (x < len) {                            this[x] = args[x];                        } else {                            this[x] = this[(x - args.length)];                        }                    }                    e.type = 'postunshift';                    _onevent(e);                }                return this.length;            }            /* ENDREGION Array methods */            /* REGION Event Listeners */            function stopChange() {                this._stopChange = true;                return this;            }            function splitScopeString(scopeString) {                return scopeString.split('.');            }            function getLayer(scopeString) {                var scope = splitScopeString(scopeString);                function rec(scope) {                    var key = scope[0];                    if (!isMixed(this[key])) return this;                    if ((scope.length - 1) !== 0) {                        scope.shift();                        return rec.call(this[key], scope);                    }                    return this[key];                }                return rec.call(this, scope);            }            function addListener(type, listener) {                return function(prop, func) {                    arguments = Array.prototype.slice.call(arguments);                    arguments.push(type);                    var _listeners = this[listener],                        e = new eventObject(this, listener, 'addlistener', _listeners, undefined, arguments, '');                    if (typeof prop === 'string' && splitScopeString(prop).length !== 1) {                        var scopeString = splitScopeString(prop);                        scopeString.pop();                        scopeString.join(".");                        e.local = this.getLayer(scopeString);                        _listeners = e.local[listener];                        e.value = _listeners;                        prop = splitScopeString(prop).pop();                    }                    if (_onevent(e) !== true) {                        if (isObject.call(_listeners)) {                            if (_listeners[prop] === undefined) _listeners[prop] = [];                            _listeners[prop].push(func);                            e.type = 'postaddlistener'                            _onevent(e);                        } else if (isArray.call(_listeners)) {                            if (typeof prop === 'function') {                                _listeners.push(prop);                                e.type = 'postaddlistener'                                _onevent(e);                            }                        }                    }                    return this;                }            }            function removeListener(type, listener) {                return function(prop, func) {                    arguments = Array.prototype.slice.call(arguments);                    arguments.push(type);                    var _listeners = this[listener],                        e = new eventObject(this, listener, 'removelistener', _listeners, undefined, arguments, '');                    if (typeof prop === 'string' && splitScopeString(prop).length !== 1) {                        var scopeString = splitScopeString(prop);                        scopeString.pop();                        scopeString.join(".");                        e.local = this.getLayer(scopeString);                        _listeners = e.local[listener];                        e.value = _listeners;                        prop = splitScopeString(prop).pop();                    }                    if (_onevent(e) !== true) {                        if (isObject.call(_listeners)) {                            if (_listeners[prop] !== undefined) {                                for (var x = 0, len = _listeners[prop].length; x < len; x++) {                                    if (_listeners[prop][x].toString() === func.toString()) {                                        _listeners[prop].splice(x, 1);                                        e.type = 'postremovelistener';                                        _onevent(e);                                        break;                                    }                                }                            }                        } else if (isArray.call(_listeners)) {                            if (typeof prop === 'function') {                                for (var x = 0, len = _listeners.length; x < len; x++) {                                    if (_listeners[x].toString() === func.toString()) {                                        _listeners.splice(x, 1);                                        e.type = 'postremovelistener';                                        _onevent(e);                                        break;                                    }                                }                            }                        }                    }                    return this;                }            }            function addActionListener(type, func) {                if (this.__kbref.__kbevents[type] !== undefined) {                    this.__kbref.__kbevents[type].push(func);                }                return this;            }            function removeActionListener(type, func) {                if (this.__kbref.__kbevents[type] !== undefined) {                    for (var x = 0, len = this.__kbref.__kbevents[type]; x < len; x++) {                        if (this.__kbref.__kbevents[type][x].toString() === func.toString()) {                            this.__kbref.__kbevents[type].splice(x, 1);                            break;                        }                    }                }                return this;            }            function addChildListener(type, listener) {                function recAddListener(prop, func, listener) {                    var children = Object.keys(this, 'all').filter((function(p) {                        return (isMixed.call(this[p]));                    }).bind(this));                    var _local = this,                        _locProp = prop;                    if (typeof prop === 'string' && splitScopeString(prop).length !== 1) {                        var scopeString = splitScopeString(prop);                        _locProp = scopeString.pop();                        scopeString.join(".");                        _local = this.getLayer(scopeString);                        if (_local[listener][prop] === undefined) _local[listener][prop] = [];                        _local[listener][prop].push(func);                    }                    if (isObject.call(_local[listener])) {                        if (_local[listener][_locProp] === undefined) _local[listener][_locProp] = [];                        _local[listener][_locProp].push(func);                        if (_local.__kbpointers[_locProp] !== undefined) {                            if (_local.__kbpointers[_locProp][_locProp] === undefined) _local.__kbpointers[_locProp][_locProp] = [];                            _local.__kbpointers[_locProp][_locProp].push(_func);                        }                    } else {                        _local[listener].push(func);                    }                    for (var x = 0, len = children.length; x < len; x++) {                        recAddListener.call(this[children[x]], prop, func, listener);                    }                }                return function(prop, func) {                    arguments = Array.prototype.slice.call(arguments);                    arguments.push(type);                    var e = new eventObject(this, listener, 'addchildlistener', undefined, undefined, arguments, '');                    if (_onevent(e) !== true) {                        recAddListener.call(this, prop, func, listener);                        e.type = 'postaddchildlistener';                        _onevent(e);                    }                    return this;                }            }            function removeChildListener(type, listener) {                function recRemoveListener(prop, func, listener) {                    var children = Object.keys(this, 'all').filter((function(p) {                        return (isMixed.call(this[p]));                    }).bind(this));                    var _local = this,                        _locProp = prop;                    if (typeof prop === 'string' && splitScopeString(prop).length !== 1) {                        var scopeString = splitScopeString(prop);                        _locProp = scopeString.pop();                        scopeString.join(".");                        _local = this.getLayer(scopeString);                        if (_local[listener][prop] !== undefined) {                            for (var x = 0, len = _local[listener][prop].length; x < len; x++) {                                if (_local[listener][prop][x].toString() === func.toString()) {                                    _local[listener][prop].splice(x, 1);                                    break;                                }                            }                        }                    }                    if (isObject.call(_local[listener])) {                        if (_local[listener][_locProp] !== undefined) {                            for (var x = 0, len = _local[listener][_locProp].length; x < len; x++) {                                if (_local[listener][_locProp][x].toString() === func.toString()) {                                    _local[listener][_locProp].splice(x, 1);                                    break;                                }                            }                            if (_local.__kbpointers.indexOf(_locProp) !== -1) {                                if (_local[_locProp].__kbImmediateParent[listener][_locProp] !== undefined) {                                    for (var x = 0, len = _local[_locProp].__kbImmediateParent[listener][_locProp].length; x < len; x++) {                                        if (_local[_locProp].__kbImmediateParent[listener][_locProp][x].toString() === func.toString()) {                                            _local[_locProp].__kbImmediateParent[listener][_locProp].splice(x, 1);                                            break;                                        }                                    }                                }                            }                        }                    } else {                        for (var x = 0, len = _local[listener].length; x < len; x++) {                            if (_local[listener][x].toString() === func.toString()) {                                _local[listener].splice(x, 1);                                break;                            }                        }                    }                    for (var x = 0, len = children.length; x < len; x++) {                        recRemoveListener.call(this[children[x]], prop, func, listener);                    }                }                return function(prop, func) {                    arguments = Array.prototype.slice.call(arguments);                    arguments.push(type);                    var e = new eventObject(this, listener, 'removechildlistener', undefined, undefined, arguments, '');                    if (_onevent(e) !== true) {                        recRemoveListener.call(this, prop, func, listener);                        e.type = 'postremovechildlistener';                        _onevent(e);                    }                    return this;                }            }            function subscribe(prop, func) {                if (this.__kbsubscribers[prop] === undefined) this.__kbsubscribers[prop] = [];                this.__kbsubscribers[prop].push(func);                return this;            }            function unsubscribe(prop, func) {                if (this.__kbsubscribers[prop] !== undefined) {                    for (var x = 0, len = this.__kbsubscribers[prop].length; x < len; x++) {                        if (this.__kbsubscribers[prop][x].toString() === func.toString()) {                            this.__kbsubscribers[prop].splice(x, 1);                            break;                        }                    }                }                return this;            }            function callSubscribers(prop, value, oldValue) {                if (this.__kbsubscribers[prop] !== undefined) {                    for (var x = 0, len = this.__kbsubscribers[prop].length; x < len; x++) {                        this.__kbsubscribers[prop].call(this, prop, value, oldValue);                    }                }                return this;            }            /* ENDREGION Event Listeners */            Object.defineProperties(Mixed.prototype, {                /* Non destructive Array methods */                concat: setDescriptor(Array.prototype.concat),                every: setDescriptor(Array.prototype.every),                filter: setDescriptor(Array.prototype.filter),                find: setDescriptor(Array.prototype.find),                findIndex: setDescriptor(Array.prototype.findIndex),                forEach: setDescriptor(Array.prototype.forEach),                includes: setDescriptor(Array.prototype.includes),                indexOf: setDescriptor(Array.prototype.indexOf),                join: setDescriptor(Array.prototype.join),                lastIndexOf: setDescriptor(Array.prototype.lastIndexOf),                map: setDescriptor(Array.prototype.map),                reduce: setDescriptor(Array.prototype.reduce),                reduceRight: setDescriptor(Array.prototype.reduceRight),                slice: setDescriptor(Array.prototype.slice),                some: setDescriptor(Array.prototype.some),                entries: setDescriptor(Array.prototype.entries),                toLocaleString: setDescriptor(Array.prototype.toLocaleString),                /* Object Methods */                add: setDescriptor(add),                set: setDescriptor(set),                del: setDescriptor(del),                addPrototype: setDescriptor(addPrototype),                addPointer: setDescriptor(addPointer),                move: setDescriptor(move),                copy: setDescriptor(copy),                merge: setDescriptor(merge),                /* Array Methods */                copyWithin: setDescriptor(copyWithin),                fill: setDescriptor(fill),                pop: setDescriptor(pop),                push: setDescriptor(push),                reverse: setDescriptor(reverse),                shift: setDescriptor(shift),                sort: setDescriptor(sort),                splice: setDescriptor(splice),                unshift: setDescriptor(unshift),                /* Helpers */                getLayer: setDescriptor(getLayer),                ignoreCreate: setDescriptor(ignoreCreate),                /* Event Listeners */                addActionListener: setDescriptor(addActionListener),                removeActionListener: setDescriptor(removeActionListener),                subscribe: setDescriptor(subscribe),                unsubscribe: setDescriptor(unsubscribe),                callSubscribers: setDescriptor(callSubscribers),                stopChange: setDescriptor(stopChange),                _stopChange: setDescriptor(undefined, true)            });            Object.defineProperties(Mixed.prototype, {                /* Standard Data Listeners as a single layer */                addDataListener: setDescriptor(addListener('addDataListener', '__kblisteners')),                removeDataListener: setDescriptor(removeListener('removeDataListener', '__kblisteners')),                addDataUpdateListener: setDescriptor(addListener('addDataUpdateListener', '__kbupdatelisteners')),                removeDataUpdateListener: setDescriptor(removeListener('removeDataUpdateListener', '__kbupdatelisteners')),                addDataCreateListener: setDescriptor(addListener('addDataCreateListener', '__kbcreatelisteners')),                removeDataCreateListener: setDescriptor(removeListener('removeDataCreateListener', '__kbcreatelisteners')),                addDataDeleteListener: setDescriptor(addListener('addDataDeleteListener', '__kbdeletelisteners')),                removeDataDeleteListener: setDescriptor(removeListener('removeDataDeleteListener', '__kbdeletelisteners')),                /* MultiLayer Child Listeners */                addChildDataListener: setDescriptor(addChildListener('addChildDataListener', '__kbparentlisteners')),                removeChildDataListener: setDescriptor(removeChildListener('removeChildDataListener', '__kbparentlisteners')),                addChildDataUpdateListener: setDescriptor(addChildListener('addChildDataUpdateListener', '__kbparentupdatelisteners')),                removeChildDataUpdateListener: setDescriptor(removeChildListener('removeChildDataUpdateListener', '__kbparentupdatelisteners')),                addChildDataCreateListener: setDescriptor(addChildListener('addChildDataCreateListener', '__kbparentcreatelisteners')),                removeChildDataCreateListener: setDescriptor(removeChildListener('removeChildDataCreateListener', '__kbparentcreatelisteners')),                addChildDataDeleteListener: setDescriptor(addChildListener('addChildDataDeleteListener', '__kbparentdeletelisteners')),                removeChildDataDeleteListener: setDescriptor(removeChildListener('removeChildDataDeleteListener', '__kbparentdeletelisteners')),            });            return Mixed;        }        return CreateKonnektDT;    }());    var CreateKonnektL = (function() {        function CreateKonnektL() {            var _onload = function() {},                _reNodes = /(<\/.*?>)/g;            if (!window.K_Components) window.K_Components = {};            /* main takes name and loads file, after load it checks html and cms html if applicable */            function KonnektL(name) {                function onLoad(method) {                    var unknowns = KonnektL.getUnknowns(method.prototype.k_html);                    if (method.k_cms) {                        unknowns.concat(KonnektL.getUnknowns(method.k_cms.prototype.kcms_html));                    }                    if (unknowns.length !== 0) KonnektL(unknowns);                }                if (typeof name === 'object') {                    for (var x = 0, len = name.length; x < len; x++) {                        if (!K_Components[name[x]]) {                            KonnektL.load(name[x], 'component/' + name[x] + '/' + location.search, _onload);                        } else {                            _onload(name[x], K_Components[name[x]], document.getElementById('script_' + name[x]));                        }                    }                } else if (typeof name === 'string') {                    if (!K_Components[name[x]]) {                        KonnektL.load(name, 'component/' + name + '/' + location.search, _onload);                    } else {                        _onload(name, K_Components[name], document.getElementById('script_' + name));                    }                }            }            /* checks for unregistered components in the html */            KonnektL.getUnknowns = function(html) {                var matched = html.match(_reNodes);                return matched.map(function(k) {                        return k.replace(/[<\/>]/g, "");                    })                    .filter(function(k, i) {                        return ((document.createElement(k) instanceof HTMLUnknownElement) && (matched.indexOf(k, (i + 1)) === -1) && !K_Components[k]);                    });            }            /* loads script tag into html */            KonnektL.load = function(name, url, cb) {                function createNode(name, src, fn) {                    var node = document.createElement('script');                    node.type = 'text/javascript';                    node.charset = 'utf-8';                    node.async = true;                    node.src = src;                    node.id = 'script_' + name;                    node.onload = function() {                        fn(name, K_Components[name], this);                    };                    return node;                }                document.head.appendChild(createNode(name, url, cb));                return KonnektL;            }            KonnektL.onLoad = function(v) {                if (v === undefined) return _onload;                _onload = (typeof v === 'function' ? v : _onload);                return KonnektL;            }            return KonnektL;        }        return CreateKonnektL;    }())    var CreateKB = (function() {        function CreateKB() {            /* This holds global attribute listeners when tied to kb */            var _attrListeners = {},                /* This holds global attribute update listeners when tied to kb */                _attrUpdateListeners = {},                /* This holds global style listeners when tied to kb */                _styleListeners = {},                /* This holds global style update listeners when tied to kb */                _styleUpdateListeners = {},                /* This holds all injected objects, so You can see what is injected */                _injected = {},                /* The symbol to dignify what the master global listener is */                _all = '*',                _texts = ['textContent', 'innerHTML', 'innerText', 'outerHTML', 'outerText', 'appendChild', 'removeChild', 'replaceChild', 'insertAdjacentHTML', 'insertBefore'],                /* A master list of all style prop names */                _allStyles = Object.getOwnPropertyNames(document.body.style),                _allEvents = Object.keys(HTMLElement.prototype).filter(function(v) {                    return (v.indexOf('on') === 0);                }).concat(['addEventListener', 'removeEventListener']),                /* global iterators */                x,                i,                /* Default set method for all listeners, loops through and runs all attached listeners */                _set = function(el, prop, val, ret, args, stopChange) {                    var e = new _changeEvent(el, prop, val, ret, args, undefined, 'set', stopChange);                    if (el.__kb !== undefined) {                        var localAttrListeners = el.__kb._attrListeners,                            localStyleListeners = el.__kb._styleListeners,                            localParentAttrListeners = el.__kb._parentAttrListeners,                            localParentStyleListeners = el.__kb._parentStyleListeners;                        if (localAttrListeners[prop] !== undefined) {                            loopListener(localAttrListeners[prop], e);                        }                        if (e._stopPropogation === undefined && localStyleListeners[prop] !== undefined) {                            loopListener(localStyleListeners[prop], e);                        }                        if (e._stopPropogation === undefined && localAttrListeners[_all] !== undefined) {                            loopListener(localAttrListeners[_all], e);                            if (e._stopPropogation === undefined) {                                loopListener(localStyleListeners[_all], e);                            }                        }                        if (e._stopPropogation === undefined && localParentAttrListeners[prop] !== undefined) {                            loopParentListener(localParentAttrListeners[prop], e);                        }                        if (e._stopPropogation === undefined && localParentStyleListeners[prop] !== undefined) {                            loopParentListener(localParentStyleListeners[prop], e);                        }                        if (e._stopPropogation === undefined && localParentAttrListeners[_all] !== undefined) {                            loopParentListener(localParentAttrListeners[_all], e);                            if (e._stopPropogation === undefined) {                                loopParentListener(localParentStyleListeners[_all], e);                            }                        }                    }                    if (e._stopPropogation === undefined && _attrListeners[prop] !== undefined) {                        loopListener(_attrListeners[prop], e);                    }                    if (e._stopPropogation === undefined && _styleListeners[prop] !== undefined) {                        loopListener(_styleListeners[prop], e);                    }                    if (e._stopPropogation === undefined && _attrListeners[_all] !== undefined) {                        loopListener(_attrListeners[_all], e);                        if (e._stopPropogation === undefined) {                            loopListener(_styleListeners[_all], e);                        }                    }                    if (e._preventDefault !== undefined) return false;                    return true;                },                /* Default update method for all listeners, loops through and runs all attached update listeners */                _update = function(el, prop, val, ret, args, action) {                    var e = new _changeEvent(el, prop, val, ret, args, action, 'update');                    if (el.__kb !== undefined) {                        var localAttrListeners = el.__kb._attrUpdateListeners,                            localStyleListeners = el.__kb._styleUpdateListeners,                            localParentAttrListeners = el.__kb._parentAttrUpdateListeners,                            localParentStyleListeners = el.__kb._parentStyleUpdateListeners;                        if (localAttrListeners[prop] !== undefined) {                            loopListener(localAttrListeners[prop], e);                        }                        if (e._stopPropogation === undefined && localStyleListeners[prop] !== undefined) {                            loopListener(localStyleListeners[prop], e);                        }                        if (e._stopPropogation === undefined && localAttrListeners[_all] !== undefined) {                            loopListener(localAttrListeners[_all], e);                            if (e._stopPropogation === undefined) {                                loopListener(localStyleListeners[_all], e);                            }                        }                        if (e._stopPropogation === undefined && localParentAttrListeners[prop] !== undefined) {                            loopParentListener(localParentAttrListeners[prop], e);                        }                        if (e._stopPropogation === undefined && localParentStyleListeners[prop] !== undefined) {                            loopParentListener(localParentStyleListeners[prop], e);                        }                        if (e._stopPropogation === undefined && localParentAttrListeners[_all] !== undefined) {                            loopParentListener(localParentAttrListeners[_all], e);                            if (e._stopPropogation === undefined) {                                loopParentListener(localParentStyleListeners[_all], e);                            }                        }                    }                    if (e._stopPropogation === undefined && _attrUpdateListeners[prop] !== undefined) {                        loopListener(_attrUpdateListeners[prop], e);                    }                    if (e._stopPropogation === undefined && _styleUpdateListeners[prop] !== undefined) {                        loopListener(_styleUpdateListeners[prop], e);                    }                    if (e._stopPropogation === undefined && _attrUpdateListeners[_all] !== undefined) {                        loopListener(_attrUpdateListeners[_all], e);                        if (e._stopPropogation === undefined) {                            loopListener(_styleUpdateListeners[_all], e);                        }                    }                    if (e._preventDefault !== undefined) return false;                    return true;                }            /* Helper method to loop through listeners and run them */            function loopListener(looper, e) {                var _looper = looper,                    _len = looper.length,                    _e = e,                    _x;                for (_x = 0; _x < _len; _x++) {                    looper[_x](_e);                    if (_e._stopPropogation !== undefined) break;                }            }            /* Helper method to loop through all parent listeners and run them */            function loopParentListener(looper, e) {                var _looper = looper,                    _len = looper.length,                    _e = e,                    _x;                for (_x = 0; _x < _len; _x++) {                    _e.child = _e.target;                    _e.target = looper[_x].parent;                    looper[_x].func(_e);                    if (_e._stopPropogation !== undefined) break;                }            }            /* Helper method to loop through all listeners and return if a method exists */            function loopListenerCheck(looper, func) {                var _looper = looper,                    _len = looper.length,                    _func = func,                    _x;                for (_x = 0; _x < _len; x++) {                    if (_looper[x].toString() === _func.toString()) return true;                }                return false;            }            /* The event object that gets passed to each listener */            function _changeEvent(el, attr, value, oldValue, args, action, type, stopChange) {                this.stopPropagation = function() {                    this._stopPropogation = true;                };                this.preventDefault = function() {                    this._preventDefault = true;                };                this.value = value;                this.oldValue = oldValue;                this.target = el;                this.attr = attr;                this.arguments = args;                this.action = action;                this.child = undefined;                this.type = type;                this.stopChange = stopChange;            }            /* This holds all listeners associated with a particular element */            function _localBinders() {                this._attrListeners = {};                this._attrUpdateListeners = {};                this._styleListeners = {};                this._styleUpdateListeners = {};                this._parentStyleListeners = {};                this._parentStyleUpdateListeners = {};                this._parentAttrListeners = {};                this._parentAttrUpdateListeners = {};                this._injectedStyle = {};            }            /* This is a standard property set overwrite  */            function setStandard(descriptor, key, set, update) {                var _descriptor = descriptor,                    _descGet = _descriptor.get,                    _descSet = _descriptor.set,                    _key = key,                    _set = set,                    _update = update,                    _oldValue;                return function standardSet(v) {                    _oldValue = _descGet.call(this);                    if (_set(this, _key, v, _oldValue, undefined, this._stopChange)) {                        _descSet.call(this, v);                    }                    if (!this._stopChange) {                        _update(this, _key, v, _oldValue);                    }                    this._stopChange = undefined;                }            }            /* This is a standard value set overwrite */            function setValue(descriptor, key, set, update) {                var _descriptor = descriptor,                    _key = key,                    _set = set,                    _update = update,                    _oldValue;                return function valueSet(v) {                    _oldValue = _descriptor.value;                    if (_set(this, _key, v, _oldValue, arguments, this._stopChange)) {                        _descriptor.value = v;                    }                    if (!this._stopChange) {                        _update(this, _key, v, _oldValue, arguments);                    }                    this._stopChange = undefined;                }            }            /* This is a standard function overwrite  */            function setFunction(descriptor, key, set, update) {                var _descriptor = descriptor,                    _descVal = _descriptor.value,                    _key = key,                    _set = set,                    _update = update,                    _action;                return function functionSet() {                    if (_set(this, _key, null, null, arguments, this._stopChange)) {                        _action = _descVal.apply(this, arguments);                    }                    if (!this._stopChange) {                        _update(this, _key, null, null, arguments, _action);                    }                    this._stopChange = undefined;                    return _action;                }            }            /* This overwites a style property */            function setStyle(descriptor, key, set, update, el) {                var _proto = el.style,                    _descriptor = descriptor,                    _key = key,                    _keyCP = key.replace(/([A-Z])/g, "-$1").replace('webkit', '-webkit'),                    _set = set,                    _update = update,                    _el = el,                    _oldValue,                    _value;                return {                    get: function() {                        return _value;                    },                    set: function styleSet(v) {                        _oldValue = _value;                        if (_set(_el, _key, v, _oldValue, undefined, this._stopChange)) {                            _value = v;                            _proto.setProperty(_keyCP, v);                        }                        if (!this._stopChange) {                            _update(_el, _key, v, _oldValue);                        }                        this._stopChange = undefined;                    },                    enumerable: true,                    configurable: true                }            }            /* A helper method that is run for all addListener methods */            function addListener(attr, func, child, update) {                if (typeof func !== 'function') return bind;                var isInput = (['value', 'checked'].indexOf(attr) !== -1),                    isStyle = (_allStyles.indexOf(attr) !== -1),                    listeners;                if (this.toString() !== bind.toString()) {                    if (child) {                        var children = this.querySelectorAll('*'),                            len = children.length,                            listenerObj;                        for (var x = 0; x < len; x++) {                            listenerObj = children[x].attrListeners();                            if (isInput || (attr === _all)) {                                if (children[x].addInputBinding !== undefined) children[x].addInputBinding();                                if (children[x].addInputBoxBinding !== undefined) children[x].addInputBoxBinding();                            }                            if (isStyle) {                                bind.injectStyleProperty(children[x], attr);                                listeners = (update ? '_parentStyleUpdateListeners' : '_parentStyleListeners');                                if (listenerObj[listeners][attr] === undefined) listenerObj[listeners][attr] = [];                                listenerObj[listeners][attr].push({                                    parent: this,                                    func: func                                });                            } else {                                if (attr === _all) {                                    listeners = (update ? '_parentStyleUpdateListeners' : '_parentStyleListeners');                                    var len = _allStyles.length;                                    for (var i = 0; i < len; i++) {                                        bind.injectStyleProperty(children[x], _allStyles[i]);                                    }                                    if (listenerObj[listeners][_all] === undefined) listenerObj[listeners][_all] = [];                                    listenerObj[listeners][_all].push({                                        parent: this,                                        func: func                                    });                                }                                listeners = (update ? '_parentAttrUpdateListeners' : '_parentAttrListeners');                                if (listenerObj[listeners][attr] === undefined) listenerObj[listeners][attr] = [];                                listenerObj[listeners][attr].push({                                    parent: this,                                    func: func                                });                            }                        }                    } else {                        listenerObj = this.attrListeners();                        if (isStyle) {                            listeners = (update ? '_styleUpdateListeners' : '_styleListeners');                            bind.injectStyleProperty(this, attr);                            if (listenerObj[listeners][attr] === undefined) listenerObj[listeners][attr] = [];                            listenerObj[listeners][attr].push(func);                        } else {                            if (isInput || (attr === _all)) {                                if (this.addInputBinding !== undefined) this.addInputBinding();                                if (this.addInputBoxBinding !== undefined) this.addInputBoxBinding();                            }                            if (attr === _all) {                                listeners = (update ? '_styleUpdateListeners' : '_styleListeners');                                var len = _allStyles.length;                                for (var x = 0; x < len; x++) {                                    bind.injectStyleProperty(this, _allStyles[x]);                                }                                if (listenerObj[listeners][attr] === undefined) listenerObj[listeners][attr] = [];                                listenerObj[listeners][attr].push(func);                            }                            listeners = (update ? '_attrUpdateListeners' : '_attrListeners');                            if (listenerObj[listeners][attr] === undefined) listenerObj[listeners][attr] = [];                            listenerObj[listeners][attr].push(func);                        }                    }                } else {                    if (isInput || (attr === _all)) {                        var inputs = document.querySelectorAll('input, textarea'),                            len = inputs.length;                        for (var x = 0; x < len; x++) {                            if (inputs[x].addInputBinding !== undefined) inputs[x].addInputBinding();                            if (inputs[x].addInputBoxBinding !== undefined) inputs[x].addInputBoxBinding();                        }                    }                    if (isStyle) {                        var els = Array.prototype.slice.call(document.body.querySelectorAll('*')),                            len = (els.length + 1);                        els.unshift(document.body);                        for (var x = 0; x < len; x++) {                            bind.injectStyleProperty(els[x], attr);                        }                        listeners = (update ? _styleUpdateListeners : _styleListeners);                        if (listeners[attr] === undefined) listeners[attr] = [];                        listeners[attr].push(func);                    } else {                        if (attr === _all) {                            var els = Array.prototype.slice.call(document.body.querySelectorAll('*')),                                len = (els.length + 1),                                lenStyles = _allStyles.length;                            els.unshift(document.body);                            for (var x = 0; x < len; x++) {                                for (var i = 0; i < lenStyles; i++) {                                    bind.injectStyleProperty(els[x], _allStyles[i]);                                }                            }                            listeners = (update ? _styleUpdateListeners : _styleListeners);                            if (listeners[attr] === undefined) listeners[attr] = [];                            listeners[attr].push(func);                        }                        listeners = (update ? _attrUpdateListeners : _attrListeners);                        if (listeners[attr] === undefined) listeners[attr] = [];                        listeners[attr].push(func);                    }                }            }            /* A helper method that is ran for all removeListener methods */            function removeListener(attr, func, child, update) {                if (typeof func !== 'function') return bind;                var isInput = (['value', 'checked'].indexOf(attr) !== -1),                    isStyle = (_allStyles.indexOf(attr) !== -1),                    listeners,                    x;                function cut(attr, list) {                    var listenerFuncs = list[attr],                        len = listenerFuncs.length;                    for (x = 0; x < len; x++) {                        if (listenerFuncs[x].toString() === func.toString()) {                            listenerFuncs.splice(x, 1);                        }                    }                }                if (this.toString() !== bind.toString()) {                    if (child) {                        var children = this.querySelectorAll('*'),                            len = children.length;                        if (isStyle) {                            listeners = (update ? '_childStyleUpdateListeners' : '_childStyleListeners');                            cut(attr, this.attrListeners()[listeners]);                            listeners = (update ? '_parentStyleUpdateListeners' : '_parentStyleListeners');                        } else {                            if (attr === _all) {                                listeners = (update ? '_childStyleUpdateListeners' : '_childStyleListeners');                                cut(attr, this.attrListeners()[listeners]);                            }                            listeners = (update ? '_childAttrUpdateListeners' : '_childAttrListeners');                            cut(attr, this.attrListeners()[listeners]);                            listeners = (update ? '_parentAttrUpdateListeners' : '_parentAttrListeners');                        }                        for (x = 0; x < len; x++) {                            var parents = children[x].attrListeners()[listeners][attr],                                parentLen = parents.length;                            for (var i = 0; i < parentLen; i++) {                                if (parents[i].isEqualNode(this)) {                                    parents.slice(i, 1);                                }                            }                            if (attr === _all) {                                listenersStyle = (update ? '_parentStyleUpdateListeners' : '_parentStyleListeners');                                var parents = children[x].attrListeners()[listeners][attr],                                    parentLen = parents.length;                                for (var i = 0; i < parentLen; i++) {                                    if (parents[i].isEqualNode(this)) {                                        parents.slice(i, 1);                                    }                                }                            }                        }                    } else {                        if (isStyle) {                            listeners = (update ? '_styleUpdateListeners' : '_styleListeners');                            cut(attr, this.attrListeners()[listeners]);                        } else {                            if (attr === _all) {                                listeners = (update ? '_styleUpdateListeners' : '_styleListeners');                                cut(attr, this.attrListeners()[listeners]);                            }                            listeners = (update ? '_attrUpdateListeners' : '_attrListeners');                            cut(attr, this.attrListeners()[listeners]);                        }                    }                } else {                    if (isStyle) {                        listeners = (update ? _styleUpdateListeners : _styleListeners);                        cut(attr, listeners);                    } else {                        if (attr === _all) {                            listeners = (update ? _styleUpdateListeners : _styleListeners);                            cut(attr, listeners);                        }                        listeners = (update ? _attrUpdateListeners : _attrListeners);                        cut(attr, listeners);                    }                }            }            /* this method gets attached to all elements for easy listener adding of child events */            function addChildAttrListener(attr, func) {                bind.addAttrListener.call(this, attr, func, true);                return this;            }            /* this method gets attached to all elements for easy listener adding of child update events */            function addChildAttrUpdateListener(attr, func) {                bind.addAttrUpdateListener.call(this, attr, func, true);                return this;            }            /* this method gets attached to all elements for easy listener removal of child events */            function removeChildAttrListener(attr, func) {                bind.removeAttrListener.call(this, attr, func, true);                return this;            }            /* this method gets attached to all elements for easy listener removal of child update events */            function removeChildAttrUpdateListener(attr, func) {                bind.removeAttrUpdateListener.call(this, attr, func, true);                return this;            }            /* This method checks if a listener of this function already exists on a desired attribute */            function hasListener(listener, attr, func) {                var _listeners = this.attrListeners();                if (attr === 'html') attr = 'innerHTML';                if (attr === 'events') attr = 'onclick';                switch (listener) {                    case 'attr':                        if (typeof _listeners._attrListeners[attr] !== undefined) {                            if (loopListenerCheck(_listeners._attrListeners[attr], func)) return true;                        } else if (typeof _listeners._styleListeners[attr] !== undefined) {                            if (loopListenerCheck(_listeners._styleListeners[attr], func)) return true;                        } else if (typeof _listeners._parentAttrListeners[attr] !== undefined) {                            if (loopListenerCheck(_listeners._parentAttrListeners[attr], func)) return true;                        } else if (typeof _listeners._parentStyleListeners[attr] !== undefined) {                            if (loopListenerCheck(_listeners._parentStyleListeners[attr], func)) return true;                        }                        break;                    case 'attrupdate':                        if (typeof _listeners._attrUpdateListeners[attr] !== undefined) {                            if (loopListenerCheck(_listeners._attrUpdateListeners[attr], func)) return true;                        } else if (typeof _listeners._styleUpdateListeners[attr] !== undefined) {                            if (loopListenerCheck(_listeners._styleUpdateListeners[attr], func)) return true;                        } else if (typeof _listeners._parentAttrUpdateListeners[attr] !== undefined) {                            if (loopListenerCheck(_listeners._parentAttrUpdateListeners[attr], func)) return true;                        } else if (typeof _listeners._parentStyleUpdateListeners[attr] !== undefined) {                            if (loopListenerCheck(_listeners._parentStyleUpdateListeners[attr], func)) return true;                        }                        break;                }                return false;            }            /* sets stopChange Property for stopping update listeners to fire */            function stopChange() {                this._stopChange = true;                return this;            }            /* This is the master constructor, to be ran only once. */            function bind() {                bind.injectPrototypes(Node, 'Node');                bind.injectPrototypes(Element, 'Element');                bind.injectPrototypes(HTMLElement, 'HTMLElement');                bind.injectPrototypes(HTMLInputElement, 'HTMLInputElement');                bind.injectPrototypes(HTMLTextAreaElement, 'HTMLTextAreaElement');                bind.injectPrototypes(Document, 'Document');                var __set = _set,                    __update = _update;                function hasInput(attrListeners) {                    var attrs = ['value', 'checked'],                        _localListeners = attrListeners,                        _localAttr = _localListeners._attrListeners,                        _localUpdateAttr = _localListeners._attrUpdateListeners,                        _localParentAttr = _localListeners._parentAttrListeners,                        _localParentUpdateAttr = _localListeners._parentAttrUpdateListeners,                        has = false;                    if (_attrListeners[_all] !== undefined || _attrUpdateListeners[_all] !== undefined) {                        has = true;                    }                    if (has !== true && _localAttr[_all] !== undefined ||                        _localUpdateAttr[_all] !== undefined ||                        _localParentAttr[_all] !== undefined ||                        _localParentUpdateAttr[_all] !== undefined) {                        has = true;                    }                    if (has !== true) {                        for (var x = 0; x < attrs.length; x++) {                            if (_attrListeners[attrs[x]] !== undefined ||                                _attrUpdateListeners[attrs[x]] !== undefined ||                                _localAttr[attrs[x]] !== undefined ||                                _localUpdateAttr[attrs[x]] !== undefined ||                                _localParentAttr[attrs[x]] !== undefined ||                                _localParentUpdateAttr[attrs[x]] !== undefined) {                                has = true;                                break;                            }                        }                    }                    return has;                }                function getStyles(arr, styles) {                    var x,                        _arr = arr,                        _styles = styles,                        len = styles.length;                    for (x = 0; x < len; x++) {                        if (_arr.indexOf(_styles[x]) === -1) {                            _arr.push(_styles[x]);                        }                    }                    return _arr;                }                function hasStyle(attrListeners) {                    var _globalStyle = Object.keys(_styleListeners),                        _globalStyleUpdate = Object.keys(_styleUpdateListeners),                        _localListeners = attrListeners,                        _localStyle = Object.keys(_localListeners._styleListeners),                        _localUpdateStyle = Object.keys(_localListeners._styleUpdateListeners),                        _localParentStyle = Object.keys(_localListeners._parentStyleListeners),                        _localParentUpdateStyle = Object.keys(_localListeners._parentStyleUpdateListeners),                        has = [];                    if (_globalStyle.length !== 0 ||                        _globalStyleUpdate.length !== 0) {                        has = getStyles(has, _globalStyle);                        has = getStyles(has, _globalStyleUpdate);                    }                    if (has.length !== 0 && _localParentStyle.length !== 0 ||                        _localParentUpdateStyle.length !== 0) {                        has = getStyles(has, _localParentStyle);                        has = getStyles(has, _localParentUpdateStyle);                    }                    if (has.indexOf(_all) !== -1) has = _allStyles;                    return has;                }                function copyListeners(listeners, copyTo) {                    var listenerProps = Object.keys(listeners),                        _currProp,                        _currListener;                    for (var x = 0, len = listenerProps.length; x < len; x++) {                        _currProp = listenerProps[x];                        if (copyTo[_currProp] === undefined) {                            copyTo[_currProp] = listeners[_currProp].slice();                        } else {                            for (var i = 0, lenI = listeners[_currProp].length; i < lenI; i++) {                                _currListener = listeners[_currProp][i];                                copyTo[_currProp].push(_currListener);                            }                        }                    }                }                function reSync(e) {                    if (e.target.nodeType !== 3 && e.target.nodeType !== 8) {                        var attrListeners = e.target.attrListeners(),                            _hasInput = hasInput(attrListeners),                            _hasStyle = hasStyle(attrListeners),                            _hasStyleLen = _hasStyle.length,                            _parentAttr,                            _parentAttrUpdate,                            _parentStyle,                            _parentStyleUpdate,                            _listeners,                            nodes = [],                            len,                            outer = ((e.attr === 'outerHTML' || e.attr === 'outerText') ? e.attr : undefined),                            target = e.target                        if (outer !== undefined) {                            e.attr = 'appendChild',                                e.arguments = [e.target];                            e.target = e.target.parentElement;                        }                        if (_hasInput) {                            if (e.attr === 'appendChild' && e.arguments[0].nodeType !== 3 && e.arguments[0].nodeType !== 8) {                                nodes = Array.prototype.slice.call(e.arguments[0].querySelectorAll('input,textarea'));                                if (e.arguments[0].tagName === 'INPUT' || e.arguments[0].tagName === 'TEXTAREA') {                                    nodes.unshift(e.arguments[0])                                }                            } else {                                nodes = Array.prototype.slice.call(e.target.querySelectorAll('input,textarea'));                            }                            len = nodes.length;                            for (var x = 0; x < len; x++) {                                if (nodes[x].addInputBinding !== undefined) nodes[x].addInputBinding();                                if (nodes[x].addInputBoxBinding !== undefined) nodes[x].addInputBoxBinding();                            }                        }                        if (e.attr === 'appendChild' && e.arguments[0].nodeName !== '#text' && e.arguments[0].nodeName !== '#comment') {                            nodes = Array.prototype.slice.call(e.arguments[0].querySelectorAll('*'));                            nodes.unshift(e.arguments[0]);                            _parentAttr = e.target.__kb._parentAttrListeners;                            _parentAttrUpdate = e.target.__kb._parentAttrUpdateListeners;                            _parentStyle = e.target.__kb._parentStyleListeners;                            _parentStyleUpdate = e.target.__kb._parentStyleUpdateListeners;                        } else {                            nodes = Array.prototype.slice.call(e.target.querySelectorAll('*'));                            _parentAttr = e.target.__kb._parentAttrListeners;                            _parentAttrUpdate = e.target.__kb._parentAttrUpdateListeners;                            _parentStyle = e.target.__kb._parentStyleListeners;                            _parentStyleUpdate = e.target.__kb._parentStyleUpdateListeners;                        }                        len = nodes.length;                        for (var x = 0; x < len; x++) {                            if (_hasStyleLen !== 0) {                                for (var i = 0; i < _hasStyleLen; i++) {                                    bind.injectStyleProperty(nodes[x], _hasStyle[i]);                                }                            }                            _listeners = nodes[x].attrListeners();                            copyListeners(_parentAttr, _listeners._parentAttrListeners);                            copyListeners(_parentAttrUpdate, _listeners._parentAttrUpdateListeners);                            copyListeners(_parentStyle, _listeners._parentStyleListeners);                            copyListeners(_parentStyleUpdate, _listeners._parentStyleUpdateListeners);                        }                        if (outer !== undefined) {                            e.attr = outer;                            e.target = target;                            e.arguments = [];                        }                    }                }                function checkAttr(e) {                    var oldAttr = e.target.attributes[e.arguments[0]],                        old = (oldAttr !== undefined ? oldAttr.value : ""),                        val = (e.attr === 'setAttribute' ? e.arguments[1] : "");                    if (!__set(e.target, e.arguments[0], val, old, [val])) {                        e.preventDefault();                    }                }                function checkAttrUpdate(e) {                    var oldAttr = e.target.attributes[e.arguments[0]],                        old = (oldAttr !== undefined ? oldAttr.value : ""),                        val = (e.attr === 'setAttribute' ? e.arguments[1] : "");                    __update(e.target, e.arguments[0], val, old, [val]);                }                //for keeping binds with inputs                bind.addAttrUpdateListener('appendChild', reSync);                bind.addAttrUpdateListener('removeChild', reSync);                bind.addAttrUpdateListener('innerHTML', reSync);                bind.addAttrUpdateListener('outerHTML', reSync);                bind.addAttrUpdateListener('innerText', reSync);                bind.addAttrUpdateListener('outerText', reSync);                bind.addAttrUpdateListener('textContent', reSync);                //allows for html attribute changes to be listened to just like properties                bind.addAttrListener('setAttribute', checkAttr);                bind.addAttrListener('removeAttribute', checkAttr);                bind.addAttrUpdateListener('setAttribute', checkAttrUpdate);                bind.addAttrUpdateListener('removeAttribute', checkAttrUpdate);                return bind;            }            bind.injectPrototypeProperty = function(obj, key, injectName, set, update) {                var _proto = obj.prototype,                    _descriptor = Object.getOwnPropertyDescriptor(_proto, key),                    _injectName = (injectName || obj.toString().split(/\s+/)[1].split('{')[0].replace('()', '')),                    _injectedObj = _injected[_injectName],                    __set = (set || _set),                    __update = (update || _update);                if (_proto.attrListeners === undefined) {                    _proto = {};                    _proto.attrListeners = (function() {                        if (this.__kb === undefined) {                            this.__kb = new _localBinders();                        }                        return this.__kb;                    }).bind(_proto);                    _proto.addAttrListener = bind.addAttrListener;                    _proto.addAttrUpdateListener = bind.addAttrUpdateListener;                    _proto.addChildAttrListener = addChildAttrListener;                    _proto.addChildAttrUpdateListener = addChildAttrUpdateListener;                    _proto.hasListener = hasListener;                    _proto.removeAttrListener = bind.removeAttrListener;                    _proto.removeAttrUpdateListener = bind.removeAttrUpdateListener;                    _proto.removeChildAttrListener = removeChildAttrListener;                    _proto.removeChildAttrUpdateListener = removeChildAttrUpdateListener;                    _proto.stopChange = stopChange;                }                if (_injectedObj === undefined) {                    _injected[_injectName] = {                        obj: obj,                        proto: _proto,                        descriptors: {},                        set: undefined,                        update: undefined                    };                    _injectedObj = _injected[_injectName];                    _injectedObj.set = __set;                    _injectedObj.update = __update;                }                if (_injectedObj.descriptors[key] === undefined) _injectedObj.descriptors[key] = _descriptor;                if (_descriptor.configurable) {                    if (_descriptor.set !== undefined) {                        Object.defineProperty(_proto, key, {                            get: _descriptor.get,                            set: setStandard(_descriptor, key, __set, __update),                            enumerable: true,                            configurable: true                        });                    } else if (typeof _descriptor.value === 'function') {                        Object.defineProperty(_proto, key, {                            value: setFunction(_descriptor, key, __set, __update),                            writable: true,                            enumerable: true,                            configurable: true                        });                    } else if (_descriptor.value !== undefined) {                        Object.defineProperty(_proto, key, {                            get: function() {                                return _descriptor.value;                            },                            set: setValue(_descriptor, key, __set, __update),                            enumerable: true,                            configurable: true                        });                    }                }                return bind;            }            bind.injectStyleProperty = function(el, key, set, update) {                var _proto = el.style,                    _descriptor = Object.getOwnPropertyDescriptor(_proto, key),                    _injectedObj = el.attrListeners().injectedStyle,                    __set = (set || _set),                    __update = (update || _update);                if (_injectedObj === undefined) {                    el.attrListeners().injectedStyle = {                        obj: el,                        proto: _proto,                        descriptors: {},                        set: undefined,                        update: undefined                    };                    el.attrListeners().injectedStyle.set = __set;                    el.attrListeners().injectedStyle.update = __update;                    _injectedObj = el.attrListeners().injectedStyle;                }                if (_injectedObj.descriptors[key] === undefined) _injectedObj.descriptors[key] = _descriptor;                if (_descriptor.configurable) {                    Object.defineProperty(_proto, key, setStyle(_descriptor, key, __set, __update, el));                }                return bind;            }            bind.injectPrototypes = function(obj, injectName, set, update) {                var _proto = obj.prototype,                    _injectName = (injectName || obj.toString().split(/\s+/)[1].split('{')[0].replace('()', '')),                    _injectedObj = _injected[_injectName],                    _keys = Object.getOwnPropertyNames(_proto),                    __set = (set || _set),                    __update = (update || _update),                    _descriptors,                    x;                if (_proto.attrListeners === undefined) {                    _proto.attrListeners = function() {                        if (this.__kb === undefined) {                            this.__kb = new _localBinders();                        }                        return this.__kb;                    }                    _proto.addAttrListener = bind.addAttrListener;                    _proto.addAttrUpdateListener = bind.addAttrUpdateListener;                    _proto.addChildAttrListener = addChildAttrListener;                    _proto.addChildAttrUpdateListener = addChildAttrUpdateListener;                    _proto.hasListener = hasListener;                    _proto.stopChange = stopChange;                }                if (_injectedObj === undefined) {                    _injected[_injectName] = {                        obj: obj,                        proto: _proto,                        descriptors: {},                        set: undefined,                        update: undefined                    };                    _injectedObj = _injected[_injectName];                    _injectedObj.set = __set;                    _injectedObj.update = __update;                }                _descriptors = _injected[_injectName].descriptors;                for (x = 0; x < _keys.length; x += 1) {                    if (_descriptors[_keys[x]] === undefined) {                        bind.injectPrototypeProperty(obj, _keys[x], _injectName, __set, _update);                    }                }                if (_keys.indexOf('value') !== -1) {                    function keyDown(e) {                        var isCheck,                            oldCheck,                            oldValue,                            value;                        if (this.type === 'checkbox' || this.type === 'radio') {                            oldCheck = this.checked;                            isCheck = true;                        }                        oldValue = (isCheck ? (typeof this.checked === 'string' ? this.checked : (this.checked ? "true" : "false")) : this.value);                        setTimeout((function() {                            value = (isCheck ? (typeof this.checked === 'string' ? this.checked : (this.checked ? "true" : "false")) : this.value);                            if (isCheck) {                                if (!_injectedObj.set(this, 'checked', this.checked, oldValue)) {                                    _descriptors['checked'].set.call(this, oldValue);                                } else {                                    _injectedObj.update(this, 'checked', this.checked, oldValue);                                }                            }                            this.value = value;                            if (!_injectedObj.set(this, 'value', this.value, oldValue)) {                                _descriptors['value'].set.call(this, oldValue);                            } else {                                _injectedObj.update(this, 'value', this.checked, oldValue);                            }                        }).bind(this), 0);                    }                    _proto.removeInputBinding = function() {                        this.attrListeners()._onkeydown = undefined;                        this.removeEventListener('keydown', keyDown);                    }                    _proto.addInputBinding = function() {                        this.attrListeners()._onkeydown = true;                        this.addEventListener('keydown', keyDown);                    }                    _proto.removeInputBoxBinding = function() {                        this.attrListeners()._onmousedown = undefined;                        this.removeEventListener('mouseup', keyDown);                    }                    _proto.addInputBoxBinding = function() {                        this.attrListeners()._onmousedown = true;                        this.addEventListener('mouseup', keyDown);                    }                }                return bind;            }            bind.addAttrListener = function(attr, func, child) {                if (attr === 'html') {                    for (var x = 0, len = _texts.length; x < len; x++) {                        addListener.call(this, _texts[x], func, child, false);                    }                } else if (attr === 'events') {                    for (var x = 0, len = _allEvents.length; x < len; x++) {                        addListener.call(this, _allEvents[x], func, child, false);                    }                } else {                    addListener.call(this, attr, func, child, false);                }                return this;            }            bind.addAttrUpdateListener = function(attr, func, child) {                if (attr === 'html') {                    for (var x = 0, len = _texts.length; x < len; x++) {                        addListener.call(this, _texts[x], func, child, true);                    }                } else if (attr === 'events') {                    for (var x = 0, len = _allEvents.length; x < len; x++) {                        addListener.call(this, _allEvents[x], func, child, true);                    }                } else {                    addListener.call(this, attr, func, child, true);                }                return this;            }            bind.removeAttrListener = function(attr, func, child) {                if (attr === 'html') {                    for (var x = 0, len = _texts.length; x < len; x++) {                        removeListener.call(this, _texts[x], func, child, false);                    }                } else if (attr === 'events') {                    for (var x = 0, len = _allEvents.length; x < len; x++) {                        removeListener.call(this, _allEvents[x], func, child, false);                    }                } else {                    removeListener.call(this, attr, func, child, false);                }                return this;            }            bind.removeAttrUpdateListener = function(attr, func, child) {                if (attr === 'html') {                    for (var x = 0, len = _texts.length; x < len; x++) {                        removeListener.call(this, _texts[x], func, child, true);                    }                } else if (attr === 'events') {                    for (var x = 0, len = _allEvents.length; x < len; x++) {                        removeListener.call(this, _allEvents[x], func, child, true);                    }                } else {                    removeListener.call(this, attr, func, child, true);                }                return this;            }            bind.hasListener = function(listener, attr, func) {                if (attr === 'html') attr = 'innerHTML';                if (attr === 'events') attr = 'onclick';                switch (listener) {                    case 'attr':                        if (typeof _attrListeners[attr] !== undefined) {                            if (loopListenerCheck(_attrListeners[attr], func)) return true;                        } else if (typeof _styleListeners[attr] !== undefined) {                            if (loopListenerCheck(_styleListeners[attr], func)) return true;                        }                        break;                    case 'attrupdate':                        if (typeof _attrUpdateListeners[attr] !== undefined) {                            if (loopListenerCheck(_attrUpdateListeners[attr], func)) return true;                        } else if (typeof _styleUpdateListeners[attr] !== undefined) {                            if (loopListenerCheck(_styleUpdateListeners[attr], func)) return true;                        }                        break;                }                return false;            }            bind.injectedPrototypes = function() {                return _injected;            }            return bind;        }        if (typeof define === "function" && define.amd) {            define('KB', CreateKB); //global KM define in browser        }        return CreateKB;    }())    /* Build */    /* End Build */    var CreateKonnektMP = (function(kb) {        function CreateKonnektMP() {            var _templates = {},                _reNodes = /(<\/.*?>)/g,                _kb = kb().call(),                _start = "{{",                _end = "}}",                _pipe = "|",                _filters = {},                _actions = {                    mapper: [],                    unsync: [],                    map: [],                    update: []                };            function KonnektMP(node) {                /* Main constructor takes node and splices into template and returns finished node */                var _name = node.tagName.toLowerCase(),                    _template = getTemplate(_name),                    _wrapper = document.createElement('div');                /* Wrapper */                _wrapper.className = _name + "__Wrapper";                _wrapper.innerHTML = _template;                return {                    node: node,                    wrapper: _wrapper,                    unkowns: getUnkownTemplates(_wrapper.innerHTML),                    maps: mapTemplate(_wrapper),                    unloaded: getUnregisteredTenplates(_wrapper.innerHTML)                };            }            /* REGION Events */            function actionObject(type, data) {                this.preventDefault = function() {                    this._preventDefault = true;                }                this.stopPropagation = function() {                    this._stopPropogation = true;                }                this.type = type;                this.data = data;            }            function _onaction(a) {                var _listeners = _actions[a.type];                for (var x = 0, len = _listeners.length; x < len; x++) {                    _listeners[x](a);                    if (!a._stopPropogation) break;                }                return a._preventDefault;            }            function addActionListener(key, func) {                if (_actions[key] !== undefined) {                    _actions[key].push(func);                }                return this;            }            function removeActionListener(key, func) {                if (_actions[key] !== undefined) {                    for (var x = 0, len = _actions[key].length; x < len; x++) {                        if (_actions[key][x].toString() === func.toString()) {                            _actions[key].splice(x, 1);                        }                    }                }                return this;            }            /* ENDREGION Events */            function setDescriptor(value, writable, redefinable) {                return {                    value: value,                    writable: !!writable,                    enumerable: false,                    configurable: !!redefinable                }            }            /* REGION Templating */            function getUnkownTemplates(template) {                var matched = template.match(_reNodes);                return matched.map(function(k) {                        return k.replace(/[<\/>]/g, "");                    })                    .filter(function(k, i) {                        return ((document.createElement(k) instanceof HTMLUnknownElement) && (matched.indexOf(k, (i + 1)) === -1));                    });            }            function getUnregisteredTenplates(template) {                return getUnkownTemplates(template)                    .filter(function(k, i) {                        return (_templates[k] === undefined);                    });            }            function isRegistered(name) {                return (_templates[name] !== undefined);            }            function register(name, template) {                if (_templates[name] === undefined) {                    _templates[name] = template;                } else {                    console.error('A template with the name', name, ' already exists');                }                return getUnkownTemplates(template);            }            function getTemplate(name) {                return _templates[name];            }            Object.defineProperties(KonnektMP, {                getUnkownTemplates: setDescriptor(getUnkownTemplates),                getUnregisteredTenplates: setDescriptor(getUnregisteredTenplates),                isRegistered: setDescriptor(isRegistered),                register: setDescriptor(register),                getTemplate: setDescriptor(getTemplate)            });            /* ENDREGION Templating */            /* REGION Mapping */            function mapObject(text, texts, bindTexts, type, binds, filters, target, prop, element, parent, listener) {                this.text = text;                this.texts = texts;                this.bindTexts = bindTexts;                this.type = type;                this.binds = binds;                this.filters = filters;                this.target = target;                this.prop = prop;                this.element = element;                this.listener = listener;                this.parent = parent;            }            function bindObject(name, text, value, filters, map) {                this.key = name;                this.text = text;                this.value = value;                this.filters = filters;            }            /* REGION Splits */            function splitText(s) {                return s.split(new RegExp('(' + _start.split('').join('\\') + ')(.*?)(' + _end.split('').join('\\') + ')', 'g'))                    .map(function(v, i, arr) {                        return ((arr[(i - 1)] === _start) ? (_start + v + _end) : v);                    })                    .filter(function(v, i, arr) {                        return (v.length !== 0 && v !== _start && v !== _end && v.length !== 0);                    });            }            function splitBinds(s) {                return s.split(new RegExp('(' + _start.split('').join('\\') + ')(.*?)(' + _end.split('').join('\\') + ')', 'g'))                    .filter(function(v, i, arr) {                        return (v !== _start && v !== _end);                    });            }            function splitMaps(s) {                return s.split(new RegExp('(' + _start.split('').join('\\') + ')(.*?)(' + _end.split('').join('\\') + ')', 'g'))                    .filter(function(v, i, arr) {                        return (arr[(i - 1)] === _start);                    });            }            function splitKey(b) {                return b.replace(new RegExp('\\' + _pipe.split('').join('\\') + '(.*)'), '').replace(/\s/g, '');            }            function splitFilter(b) {                if (b.indexOf(_pipe) !== -1) {                    return b.replace(new RegExp('(.*?)(\\' + _pipe.split('').join('\\') + ')'), '').replace(/\s/g, '').split(',');                }                return [];            }            function splitFor(b) {                if (b.indexOf('for') !== -1) {                    var split = (b.replace(/\s/g, '').split(/for(.*?)loop/).filter(function(v) {                        return v.length !== 0;                    }));                    return {                        key: split[0],                        component: splitKey(split[1]),                        filters: splitFilter(b)                    };                }                return null;            }            /* ENDREGION Splits */            /* REGION charMaps */            function startChars(v) {                if (v === undefined) {                    return _start;                }                _start = (typeof v === 'string' && v !== _end ? v : _start);                return this;            }            function endChars(v) {                if (v === undefined) {                    return _end;                }                _end = (typeof v === 'string' && v !== _start ? v : _end);                return this;            }            function pipeChars(v) {                if (v === undefined) {                    return _pipe;                }                _pipe = (typeof v === 'string' && v !== _start && v !== _end ? v : _pipe);                return this;            }            /* ENDREGION charMaps */            function map(el) {                function loopMap(childNodes) {                    var binds = [];                    for (var x = 0, len = childNodes.length; x < len; x++) {                        if (childNodes[x].kb_maps === undefined) {                            childNodes[x].kb_mapper = el;                            if (childNodes[x].nodeType === 3) {                                binds = binds.concat(bindTexts(childNodes[x]));                            } else {                                binds = binds.concat(bindAttrs(childNodes[x]));                            }                            if (childNodes[x].childNodes && childNodes[x].childNodes.length !== 0) binds = binds.concat(loopMap(childNodes[x].childNodes));                        }                    }                    return binds;                }                return loopMap(el.childNodes);            }            function checkUnsynced(binds) {                for (var x = 0, len = binds.length; x < len; x++) {                    if (binds[x].element.parentElement === null) {                        var a = new actionObject('unsync', binds[x]);                        _onaction(a);                        binds.splice(x, 1);                        len = binds.length;                    }                }                return binds;            }            function bindAttrs(node) {                var attrs = node.attributes,                    isUnkown = (node instanceof HTMLUnknownElement),                    attrBinds = [];                for (var i = 0, lenn = attrs.length; i < lenn; i++) {                    if (attrs[i].value.match(new RegExp('(\\' + _start.split('').join('\\') + ')(.*?)(\\' + _end.split('').join('\\') + ')', 'g'))) {                        var maps = splitMaps(attrs[i].value),                            texts = splitText(attrs[i].value),                            bt = splitBinds(attrs[i].value),                            a = new actionObject('mapper', {});                        var mp = new mapObject(attrs[i].value, texts, [], (isUnkown ? 'component' : 'attribute'), {}, {}, (isUnkown ? undefined : attrs[i]), attrs[i].name, (isUnkown ? node.parentElement : node), (isUnkown ? undefined : node.parentElement), (isUnkown ? undefined : attrs[i].name));                        mp.binds = maps.reduce(function(obj, v, i, arr) {                            a.type = 'map';                            a.data = new bindObject(splitKey(v), v, "", splitFilter(v), mp);                            bt[bt.indexOf(v)] = a.data;                            if (_onaction(a) !== true) obj[a.data.key] = a.data;                            return obj;                        }, {});                        mp.bindTexts = bt;                        a.type = 'mapper';                        a.data = mp;                        if (_onaction(a) !== true) attrBinds.push(a.data);                    }                }                if (isUnkown) node.kb_maps = attrBinds;                return attrBinds;            }            function bindTexts(node) {                if (node.textContent.match(new RegExp('(\\' + _start.split('').join('\\') + ')(.*?)(\\' + _end.split('').join('\\') + ')', 'g'))) {                    var maps = splitMaps(node.textContent),                        texts = splitText(node.textContent),                        bt = splitBinds(node.textContent),                        a = new actionObject('mapper', {});                    if (maps.length === 1 && maps[0].indexOf('for') !== -1) {                        /* For Mapping */                        a.data = new mapObject(node.textContent, texts, [], "for", splitFor(maps[0]), {}, node, undefined, node, node.parentElement);                        if (_onaction(a) !== true) {                            return [a.data];                        }                    } else {                        /* Text mapping */                        var mp = new mapObject(node.textContent, texts, [], 'text', {}, {}, node, 'textContent', node, node.parentElement, 'textContent');                        mp.binds = maps.reduce(function(obj, v, i, arr) {                            a.type = 'map';                            a.data = new bindObject(splitKey(v), v, "", splitFilter(v), mp);                            bt[bt.indexOf(v)] = a.data;                            if (_onaction(a) !== true) obj[splitKey(v)] = a.data;                            return obj;                        }, {});                        mp.bindTexts = bt;                        a.type = 'mapper';                        a.data = mp;                        if (_onaction(a) !== true) return [a.data];                    }                }                return [];            }            function mapTemplate(node) {                function stopHTML(e) {                    if (!e.stopChange) {                        if (e.attr !== 'replaceWith') {                            if (e.child.children.length !== 0) {                                e.preventDefault();                            } else {                                if (e.attr !== 'textContent') {                                    e.preventDefault();                                    if (e.attr === 'innerHTML') {                                        e.child.textContent = e.value;                                    }                                }                            }                        } else if (!(e.child instanceof HTMLUnknownElement)) {                            e.preventDefault();                        }                    } else {                        e.child._stopChange = undefined;                        e.stopChange = undefined;                    }                }                node.addAttrListener('html', stopHTML)                    .addChildAttrListener('html', stopHTML)                    .addChildAttrUpdateListener('html', function(e) {                        checkUnsynced(node.kb_maps);                    })                    .addChildAttrListener('events', function(e) {                        if (!!e.target.getAttribute(e.attr)) {                            e.preventDefault();                            e.target.setAttribute(e.attr.replace('on', ''));                        }                    });                Object.defineProperty(node, 'kb_maps', setDescriptor(map(node)));                for (var x = 0, len = node.kb_maps.length; x < len; x++) {                    (function(c) {                        switch (node.kb_maps[c].type) {                            case 'text':                                node.kb_maps[c].parent.addAttrUpdateListener('html', function(e) {                                    if (node.kb_maps[c].element.parentElement === undefined) {                                        var a = new actionObject('unsync', binds[x]);                                        _onaction(a);                                        node.kb_maps.splice(c, 1);                                        return;                                    }                                    if (node.kb_maps[c].element.childNodes.length !== 1) {                                        //fire update action                                        e.map = node.kb_maps[c];                                        var a = new actionObject('update', e);                                        _onaction(a);                                    }                                });                                node.kb_maps[c].element.addAttrUpdateListener(node.kb_maps[c].listener, function(e) {                                    //fire update action                                    e.map = node.kb_maps[c];                                    var a = new actionObject('update', e);                                    _onaction(a);                                })                                break;                            case 'attribute':                                if (node.kb_maps[c].listener.indexOf('on') === 0) {                                    node.kb_maps[c].element.setAttribute(node.kb_maps[c].listener.replace('on', ''), node.kb_maps[c].element.getAttribute(node.kb_maps[c].listener));                                    node.kb_maps[c].element.removeAttribute(node.kb_maps[c].listener);                                    node.kb_maps[c].listener = node.kb_maps[c].listener.replace('on', '');                                    //change to be on property rather than attribute                                }                                node.kb_maps[c].element.addAttrUpdateListener(node.kb_maps[c].listener, function(e) {                                    //fire update action                                    e.map = node.kb_maps[c];                                    var a = new actionObject('update', e);                                    _onaction(a);                                })                                break;                        }                    }(x))                }                return node.kb_maps;            }            Object.defineProperties(KonnektMP, {                startChars: setDescriptor(startChars),                endChars: setDescriptor(endChars),                pipeChars: setDescriptor(pipeChars),                checkUnsynced: setDescriptor(checkUnsynced),                mapTemplate: setDescriptor(mapTemplate),                mapNode: setDescriptor(map)            });            /* ENDREGION Mapping */            return KonnektMP;        }        return CreateKonnektMP;    }(CreateKB));    var CreateKonnekt = (function(CreateData, CreateLoader, CreateMapping) {        function CreateKonnekt() {            if (!window.K_Components) window.K_Components = {};            var _Loader = CreateLoader().onLoad(onComponentLoad),                _mixed = CreateData(),                _mapper = CreateMapping(),                _model = _mixed({}, "Model"),                _viewmodels = {},                _cms = {},                _query = getQuery(),                _ignoreList = ['id', 'filters', 'class', 'sessionStorage', 'localStorage', 'store', 'component'],                _waitList = {};            /* This method will Create page, Create Viewmodel, attach binds, check children, load files, rinse, repeat */            function Konnekt(node, params, pre, post) {                var __name = node.tagName.toLowerCase(),                    __mappedAttrs;                if (params === undefined) params = [];                /* Pre -- all about built in data this will be allocated later to seperate file */                if (pre === undefined) pre = {};                /* base core filters usable in all components */                if (!pre.filters) Object.defineProperty(pre, 'filters', setDescriptor({}));                /* whether to attempt to store data in sessionStorage */                if (!pre.sessionStorage) Object.defineProperty(pre, 'sessionStorage', setDescriptor(false, true));                /* whether to attempt to store data in localStorage */                if (!pre.localStorage) Object.defineProperty(pre, 'localStorage', setDescriptor(false, true));                /* whether to attempt to store data in the model */                if (!pre.store) Object.defineProperty(pre, 'store', setDescriptor(false, true));                /* if this component can have children components of the same type, to prevent recursion */                if (!pre.multiple) Object.defineProperty(pre, 'multiple', setDescriptor(false, true));                /* post all about post set data and pointers */                if (post === undefined) post = {};                post.innerhtml = node.innerHTML;                for (var x = 0, len = node.attributes.length; x < len; x++) {                    if (['id', 'class'].indexOf(node.attributes[x].name) === -1) post[node.attributes[x].name] = node.attributes[x].value;                }                function createViewmodel(name, component, params, pre, post) {                    var obsv = _mixed({}, name);                    obsv.ignoreCreate('__proto__');                    obsv.__proto__ = component.prototype;                    /* Pre attachments, core methods */                    for (var x = 0, keys = Object.keys(pre), len = keys.length; x < len; x++) {                        if (obsv.isObservable(pre, keys[x])) {                            obsv.addPointer(pre, keys[x]);                        } else {                            obsv.add(keys[x], pre[keys[x]]);                        }                    }                    component.apply(obsv, params);                    /* Post attachments, overwritables, for data or pointers */                    for (var x = 0, keys = Object.keys(post), len = keys.length; x < len; x++) {                        if (obsv.isObservable(post, keys[x])) {                            if (obsv[keys[x]] !== undefined) obsv.remove(keys[x]);                            obsv.addPointer(post, keys[x]);                        } else {                            obsv.set(keys[x], post[keys[x]]);                        }                    }                    /* Apply session storage if set */                    if (obsv.sessionStorage) {                        var storage = sessionStorage.getItem((obsv.id || name));                        if (storage) {                            storage = JSON.parse(storage);                            for (var x = 0, keys = Object.keys(storage), len = keys.length; x < len; x++) {                                obsv.set(keys[x], storage[keys[x]]);                            }                        } else {                            sessionStorage.setItem((obsv.id || name), obsv.stringify());                        }                        obsv.addChildDataUpdateListener('*', function() {                            sessionStorage.setItem((obsv.id || name), obsv.stringify());                        });                    }                    /* Apply local storage if set */                    if (obsv.localStorage) {                        var storage = localStorage.getItem((obsv.id || name));                        if (storage) {                            storage = JSON.parse(storage);                            for (var x = 0, keys = Object.keys(storage), len = keys.length; x < len; x++) {                                obsv.set(keys[x], storage[keys[x]]);                            }                        } else {                            localStorage.setItem((obsv.id || name), obsv.stringify());                        }                        obsv.addChildDataUpdateListener('*', function() {                            localStorage.setItem((obsv.id || name), obsv.stringify());                        });                    }                    if (obsv.store) {                        _model.set((obsv.id || name), obsv);                    }                    return obsv;                }                function mapTargets(maps, vm) {                    console.log(maps, vm);                }                function getInnerComponents() {                }                function init(name, node) {                    __mappedAttrs = _mapper(node);                    node.replaceWith(__mappedAttrs.wrapper);                    mapTargets(__mappedAttrs.maps, createViewmodel(name, _viewmodels[name], params, pre, post));                    getInnerComponents(__mappedAttrs.wrapper);                }                if (!_mapper.isRegistered(__name)) {                    Konnekt.loadWaitList(__name, function(n, c) {                        init(__name, node);                    });                    _Loader(__name);                } else {                    init(__name, node);                }            }            function setDescriptor(value, writable, redefinable) {                return {                    value: value,                    writable: !!writable,                    enumerable: false,                    configurable: !!redefinable                }            }            function getQuery() {                return window.location.search.replace('?', '')                    .split('&')                    .filter(function(v) {                        return (v.length !== 0);                    })                    .reduce(function(o, v) {                        o[v.split('=')[0]] = v.split('=')[1];                        return o;                    }, {});            }            function onComponentLoad(name, component) {                var template = "<style>" + component.prototype.k_css + "</style>" + component.prototype.k_html;                Konnekt.register(name, component, template, component.prototype.cms)                Konnekt.loadWaitList(name)(name, component);                Konnekt.loadWaitList(name, function() {});            }            /* Registers name to a component */            Konnekt.register = function(name, vm, template, cms) {                _mapper.register(name, template);                _viewmodels[name] = vm;                if (cms) _cms[name] = cms;                return Konnekt;            }            /* register for a component to load and be registered */            Konnekt.loadWaitList = function(name, v) {                if (typeof v === 'undefined' && name) return _waitList[name];                if (name) _waitList[name] = (typeof v === 'function' ? v : _waitList[name]);                return Konnekt;            }            return Konnekt;        }        return CreateKonnekt;    }(CreateKonnektDT, CreateKonnektL, CreateKonnektMP));    if ((typeof window !== 'undefined') && (typeof window.define !== 'undefined') && (typeof window.require !== 'undefined')) {        define([], function() {            return CreateKonnekt;        });    } else if ((typeof module !== 'undefined')) {        module.exports = CreateKonnekt;    }    return CreateKonnekt;}())
